
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000071a  000007ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000007ae  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d77  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b8  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000402  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  000025cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003bc  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cbf  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
   2:	00 00       	nop
   4:	00 c1       	rjmp	.+512    	; 0x206 <__bad_interrupt>
   6:	00 00       	nop
   8:	fe c0       	rjmp	.+508    	; 0x206 <__bad_interrupt>
   a:	00 00       	nop
   c:	fc c0       	rjmp	.+504    	; 0x206 <__bad_interrupt>
   e:	00 00       	nop
  10:	fa c0       	rjmp	.+500    	; 0x206 <__bad_interrupt>
  12:	00 00       	nop
  14:	f8 c0       	rjmp	.+496    	; 0x206 <__bad_interrupt>
  16:	00 00       	nop
  18:	f6 c0       	rjmp	.+492    	; 0x206 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f4 c0       	rjmp	.+488    	; 0x206 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f2 c0       	rjmp	.+484    	; 0x206 <__bad_interrupt>
  22:	00 00       	nop
  24:	f0 c0       	rjmp	.+480    	; 0x206 <__bad_interrupt>
  26:	00 00       	nop
  28:	e8 c1       	rjmp	.+976    	; 0x3fa <__vector_10>
  2a:	00 00       	nop
  2c:	25 c2       	rjmp	.+1098   	; 0x478 <__vector_11>
  2e:	00 00       	nop
  30:	ea c0       	rjmp	.+468    	; 0x206 <__bad_interrupt>
  32:	00 00       	nop
  34:	e8 c0       	rjmp	.+464    	; 0x206 <__bad_interrupt>
  36:	00 00       	nop
  38:	e6 c0       	rjmp	.+460    	; 0x206 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e4 c0       	rjmp	.+456    	; 0x206 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e2 c0       	rjmp	.+452    	; 0x206 <__bad_interrupt>
  42:	00 00       	nop
  44:	e0 c0       	rjmp	.+448    	; 0x206 <__bad_interrupt>
  46:	00 00       	nop
  48:	de c0       	rjmp	.+444    	; 0x206 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	dc c0       	rjmp	.+440    	; 0x206 <__bad_interrupt>
  4e:	00 00       	nop
  50:	da c0       	rjmp	.+436    	; 0x206 <__bad_interrupt>
  52:	00 00       	nop
  54:	d8 c0       	rjmp	.+432    	; 0x206 <__bad_interrupt>
  56:	00 00       	nop
  58:	d6 c0       	rjmp	.+428    	; 0x206 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d4 c0       	rjmp	.+424    	; 0x206 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d2 c0       	rjmp	.+420    	; 0x206 <__bad_interrupt>
  62:	00 00       	nop
  64:	d0 c0       	rjmp	.+416    	; 0x206 <__bad_interrupt>
  66:	00 00       	nop
  68:	ce c0       	rjmp	.+412    	; 0x206 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	cc c0       	rjmp	.+408    	; 0x206 <__bad_interrupt>
  6e:	00 00       	nop
  70:	ca c0       	rjmp	.+404    	; 0x206 <__bad_interrupt>
  72:	00 00       	nop
  74:	c8 c0       	rjmp	.+400    	; 0x206 <__bad_interrupt>
  76:	00 00       	nop
  78:	c6 c0       	rjmp	.+396    	; 0x206 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c4 c0       	rjmp	.+392    	; 0x206 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c2 c0       	rjmp	.+388    	; 0x206 <__bad_interrupt>
  82:	00 00       	nop
  84:	c0 c0       	rjmp	.+384    	; 0x206 <__bad_interrupt>
  86:	00 00       	nop
  88:	be c0       	rjmp	.+380    	; 0x206 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bc c0       	rjmp	.+376    	; 0x206 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ba c0       	rjmp	.+372    	; 0x206 <__bad_interrupt>
  92:	00 00       	nop
  94:	b8 c0       	rjmp	.+368    	; 0x206 <__bad_interrupt>
  96:	00 00       	nop
  98:	b6 c0       	rjmp	.+364    	; 0x206 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b4 c0       	rjmp	.+360    	; 0x206 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b2 c0       	rjmp	.+356    	; 0x206 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b0 c0       	rjmp	.+352    	; 0x206 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ae c0       	rjmp	.+348    	; 0x206 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1846>:
  ac:	0a 00                                               ..

000000ae <__c.1835>:
  ae:	0a 00                                               ..

000000b0 <__c.1830>:
  b0:	20 64 69 74 00                                       dit.

000000b5 <__c.1828>:
  b5:	20 64 61 68 00                                       dah.

000000ba <__c.1823>:
  ba:	43 68 61 72 20 00                                   Char .

000000c0 <__c.1821>:
  c0:	0a 00                                               ..

000000c2 <__c.1819>:
  c2:	4f 70 70 73 2c 20 75 6e 73 75 70 70 6f 72 74 65     Opps, unsupporte
  d2:	64 20 63 68 61 72 61 63 74 65 72 3a 20 00           d character: .

000000e0 <__c.1817>:
  e0:	53 70 61 63 65 0a 00                                Space..

000000e7 <__c.1809>:
  e7:	44 4f 45 53 20 41 4e 59 42 4f 44 59 20 53 54 49     DOES ANYBODY STI
  f7:	4c 4c 20 4b 4e 4f 57 20 4d 4f 52 53 45 20 43 4f     LL KNOW MORSE CO
 107:	44 45 3f 00                                         DE?.

0000010b <__c.1804>:
 10b:	53 4f 53 00                                         SOS.

0000010f <morse_code_table>:
 10f:	42 84 a4 83 01 24 c3 04 02 74 a3 44 c2 82 e3 64     B....$...t.D...d
 11f:	d4 43 03 81 23 14 63 94 b4 c4                       .C..#.c...

00000129 <descriptor_list>:
 129:	00 01 00 00 cd 01 12 00 02 00 00 96 01 22 00 22     ............."."
 139:	00 00 b8 01 15 00 21 00 00 a8 01 09 00 03 00 00     ......!.........
 149:	92 01 04 01 03 09 04 7c 01 14 02 03 09 04 5a 01     .......|......Z.
 159:	20                                                   

0000015a <string2>:
 15a:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 16a:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 17a:	00 00                                               ..

0000017c <string1>:
 17c:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 18c:	6d 00 65 00 00 00                                   m.e...

00000192 <string0>:
 192:	04 03 09 04                                         ....

00000196 <config1_descriptor>:
 196:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 1a6:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 1b6:	00 01                                               ..

000001b8 <hid_report_descriptor>:
 1b8:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1c8:	09 75 81 02 c0                                      .u...

000001cd <device_descriptor>:
 1cd:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 1dd:	00 01                                               ..

000001df <endpoint_config_table>:
 1df:	00 00 01 c1 26 00 00                                ....&..

000001e6 <__ctors_end>:
 1e6:	11 24       	eor	r1, r1
 1e8:	1f be       	out	0x3f, r1	; 63
 1ea:	cf ef       	ldi	r28, 0xFF	; 255
 1ec:	da e0       	ldi	r29, 0x0A	; 10
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_clear_bss>:
 1f2:	11 e0       	ldi	r17, 0x01	; 1
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
 1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
 1fc:	a3 30       	cpi	r26, 0x03	; 3
 1fe:	b1 07       	cpc	r27, r17
 200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
 202:	76 d0       	rcall	.+236    	; 0x2f0 <main>
 204:	88 c2       	rjmp	.+1296   	; 0x716 <_exit>

00000206 <__bad_interrupt>:
 206:	fc ce       	rjmp	.-520    	; 0x0 <__vectors>

00000208 <morse_character>:
	}
}

// blink a single character in Morse code
void morse_character(char c)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	c8 2f       	mov	r28, r24
	unsigned char code, count;

	if (c == ' ') {
 20e:	80 32       	cpi	r24, 0x20	; 32
 210:	59 f4       	brne	.+22     	; 0x228 <morse_character+0x20>
		print("Space\n");
 212:	80 ee       	ldi	r24, 0xE0	; 224
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	6b d2       	rcall	.+1238   	; 0x6ee <print_P>
 218:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	87 e5       	ldi	r24, 0x57	; 87
 21c:	9b e1       	ldi	r25, 0x1B	; 27
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <morse_character+0x16>
 226:	4f c0       	rjmp	.+158    	; 0x2c6 <morse_character+0xbe>
 228:	8f eb       	ldi	r24, 0xBF	; 191
		_delay_ms(DIT * 7);
		return;
	}
	if (c < 'A' || c > 'Z') {
 22a:	8c 0f       	add	r24, r28
 22c:	8a 31       	cpi	r24, 0x1A	; 26
 22e:	50 f0       	brcs	.+20     	; 0x244 <morse_character+0x3c>
 230:	82 ec       	ldi	r24, 0xC2	; 194
		print("Opps, unsupported character: ");
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	5c d2       	rcall	.+1208   	; 0x6ee <print_P>
 236:	8c 2f       	mov	r24, r28
 238:	9e d0       	rcall	.+316    	; 0x376 <usb_debug_putchar>
		pchar(c);
 23a:	80 ec       	ldi	r24, 0xC0	; 192
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	df 91       	pop	r29
		print("\n");
 240:	cf 91       	pop	r28
 242:	55 c2       	rjmp	.+1194   	; 0x6ee <print_P>
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
	_delay_ms(DIT * 2);
}
 244:	8a eb       	ldi	r24, 0xBA	; 186
 246:	90 e0       	ldi	r25, 0x00	; 0
		return;
	}
	if (c < 'A' || c > 'Z') {
		print("Opps, unsupported character: ");
		pchar(c);
		print("\n");
 248:	52 d2       	rcall	.+1188   	; 0x6ee <print_P>
 24a:	8c 2f       	mov	r24, r28
		return;	
	}
	print("Char ");
 24c:	94 d0       	rcall	.+296    	; 0x376 <usb_debug_putchar>
 24e:	8a e3       	ldi	r24, 0x3A	; 58
 250:	92 d0       	rcall	.+292    	; 0x376 <usb_debug_putchar>
 252:	ec 2f       	mov	r30, r28
	pchar(c);
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e2 53       	subi	r30, 0x32	; 50
 258:	ff 4f       	sbci	r31, 0xFF	; 255
	pchar(':');
 25a:	c4 91       	lpm	r28, Z
 25c:	dc 2f       	mov	r29, r28
 25e:	d7 70       	andi	r29, 0x07	; 7
	code = pgm_read_byte(morse_code_table + (c - 'A'));
 260:	dd 23       	and	r29, r29
 262:	39 f1       	breq	.+78     	; 0x2b2 <morse_character+0xaa>
 264:	5e 9a       	sbi	0x0b, 6	; 11
 266:	c7 ff       	sbrs	r28, 7
 268:	0b c0       	rjmp	.+22     	; 0x280 <morse_character+0x78>
	for (count = code & 0x07; count > 0; count--) {
 26a:	85 eb       	ldi	r24, 0xB5	; 181
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	3f d2       	rcall	.+1150   	; 0x6ee <print_P>
 270:	2f ef       	ldi	r18, 0xFF	; 255
		LED_ON;
 272:	87 eb       	ldi	r24, 0xB7	; 183
		if (code & 0x80) {
 274:	9b e0       	ldi	r25, 0x0B	; 11
 276:	21 50       	subi	r18, 0x01	; 1
			print(" dah");
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <morse_character+0x6e>
 27e:	0a c0       	rjmp	.+20     	; 0x294 <morse_character+0x8c>
 280:	80 eb       	ldi	r24, 0xB0	; 176
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	34 d2       	rcall	.+1128   	; 0x6ee <print_P>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	87 ee       	ldi	r24, 0xE7	; 231
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
			_delay_ms(DIT * 3);
		} else {
			print(" dit");
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <morse_character+0x84>
 294:	00 c0       	rjmp	.+0      	; 0x296 <morse_character+0x8e>
 296:	00 00       	nop
 298:	5e 98       	cbi	0x0b, 6	; 11
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	87 ee       	ldi	r24, 0xE7	; 231
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <morse_character+0x98>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <morse_character+0xa2>
			_delay_ms(DIT);
		}
		LED_OFF;
 2aa:	00 00       	nop
 2ac:	cc 0f       	add	r28, r28
 2ae:	d1 50       	subi	r29, 0x01	; 1
 2b0:	d7 cf       	rjmp	.-82     	; 0x260 <morse_character+0x58>
 2b2:	8e ea       	ldi	r24, 0xAE	; 174
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	1b d2       	rcall	.+1078   	; 0x6ee <print_P>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	97 e0       	ldi	r25, 0x07	; 7
		_delay_ms(DIT);
		code = code << 1;
 2be:	21 50       	subi	r18, 0x01	; 1
	}
	print("Char ");
	pchar(c);
	pchar(':');
	code = pgm_read_byte(morse_code_table + (c - 'A'));
	for (count = code & 0x07; count > 0; count--) {
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
		}
		LED_OFF;
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
 2c4:	e1 f7       	brne	.-8      	; 0x2be <morse_character+0xb6>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <morse_character+0xc0>
 2c8:	00 00       	nop
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <morse_P>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	fc 01       	movw	r30, r24
 2d6:	84 91       	lpm	r24, Z
 2d8:	ef 01       	movw	r28, r30
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	88 23       	and	r24, r24
	_delay_ms(DIT * 2);
}
 2de:	19 f0       	breq	.+6      	; 0x2e6 <morse_P+0x16>
 2e0:	93 df       	rcall	.-218    	; 0x208 <morse_character>
 2e2:	fe 01       	movw	r30, r28
	char c;
	
	while (1) {
		c = pgm_read_byte(s++);
		if (!c) break;
		morse_character(c);
 2e4:	f8 cf       	rjmp	.-16     	; 0x2d6 <morse_P+0x6>
	}
 2e6:	8c ea       	ldi	r24, 0xAC	; 172
	print("\n");
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	df 91       	pop	r29
}
 2ec:	cf 91       	pop	r28
 2ee:	ff c1       	rjmp	.+1022   	; 0x6ee <print_P>

000002f0 <main>:
	while (1) {
		c = pgm_read_byte(s++);
		if (!c) break;
		morse_character(c);
	}
	print("\n");
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	80 93 61 00 	sts	0x0061, r24
int main(void)
{
	unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
 2f6:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
 2fa:	56 9a       	sbi	0x0a, 6	; 10
	LED_OFF;
 2fc:	5e 98       	cbi	0x0b, 6	; 11

	// initialize the USB, but don't want for the host to
	// configure.  The first several messages sent will be
	// lost because the PC hasn't configured the USB yet,
	// but we care more about blinking than debug messages!
	usb_init();
 2fe:	24 d0       	rcall	.+72     	; 0x348 <usb_init>
 300:	c0 e0       	ldi	r28, 0x00	; 0

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 302:	c6 30       	cpi	r28, 0x06	; 6
 304:	70 f4       	brcc	.+28     	; 0x322 <main+0x32>
 306:	8b e0       	ldi	r24, 0x0B	; 11
			morse_P(PSTR("SOS"));
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	e2 df       	rcall	.-60     	; 0x2d0 <morse_P>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	8d e3       	ldi	r24, 0x3D	; 61
 310:	99 e4       	ldi	r25, 0x49	; 73
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x22>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x2c>
 31c:	00 00       	nop
 31e:	cf 5f       	subi	r28, 0xFF	; 255
 320:	f0 cf       	rjmp	.-32     	; 0x302 <main+0x12>
	// but we care more about blinking than debug messages!
	usb_init();

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 322:	87 ee       	ldi	r24, 0xE7	; 231
 324:	90 e0       	ldi	r25, 0x00	; 0
			morse_P(PSTR("SOS"));
			_delay_ms(1500);
		}
		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
 326:	d4 df       	rcall	.-88     	; 0x2d0 <morse_P>
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	8f e4       	ldi	r24, 0x4F	; 79
 32c:	93 ec       	ldi	r25, 0xC3	; 195
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x3e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x48>
 338:	00 00       	nop
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	e4 cf       	rjmp	.-56     	; 0x306 <main+0x16>

0000033e <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 33e:	80 91 e8 00 	lds	r24, 0x00E8
 342:	80 ff       	sbrs	r24, 0
 344:	fc cf       	rjmp	.-8      	; 0x33e <usb_wait_in_ready>
}
 346:	08 95       	ret

00000348 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 34e:	80 ea       	ldi	r24, 0xA0	; 160
 350:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 354:	82 e1       	ldi	r24, 0x12	; 18
 356:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 358:	09 b4       	in	r0, 0x29	; 41
 35a:	00 fe       	sbrs	r0, 0
 35c:	fd cf       	rjmp	.-6      	; 0x358 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 35e:	80 e9       	ldi	r24, 0x90	; 144
 360:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 364:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 368:	10 92 02 01 	sts	0x0102, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 372:	78 94       	sei
 374:	08 95       	ret

00000376 <usb_debug_putchar>:
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 376:	90 91 02 01 	lds	r25, 0x0102
 37a:	99 23       	and	r25, r25
 37c:	71 f0       	breq	.+28     	; 0x39a <usb_debug_putchar+0x24>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 37e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 380:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 382:	23 e0       	ldi	r18, 0x03	; 3
 384:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 388:	20 91 00 01 	lds	r18, 0x0100
 38c:	22 23       	and	r18, r18
 38e:	49 f0       	breq	.+18     	; 0x3a2 <usb_debug_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 390:	20 91 e8 00 	lds	r18, 0x00E8
 394:	25 fd       	sbrc	r18, 5
 396:	03 c0       	rjmp	.+6      	; 0x39e <usb_debug_putchar+0x28>
			SREG = intr_state;
 398:	9f bf       	out	0x3f, r25	; 63
			return -1;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	08 95       	ret
		}
		previous_timeout = 0;
 39e:	10 92 00 01 	sts	0x0100, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 3a2:	20 91 e4 00 	lds	r18, 0x00E4
 3a6:	2c 5f       	subi	r18, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 3a8:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 3aa:	40 91 e8 00 	lds	r20, 0x00E8
 3ae:	45 fd       	sbrc	r20, 5
 3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <usb_debug_putchar+0x60>
		SREG = intr_state;
 3b2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 3b4:	90 91 e4 00 	lds	r25, 0x00E4
 3b8:	92 13       	cpse	r25, r18
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <usb_debug_putchar+0x4e>
			previous_timeout = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 00 01 	sts	0x0100, r24
 3c2:	eb cf       	rjmp	.-42     	; 0x39a <usb_debug_putchar+0x24>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3c4:	90 91 02 01 	lds	r25, 0x0102
 3c8:	99 23       	and	r25, r25
 3ca:	39 f3       	breq	.-50     	; 0x39a <usb_debug_putchar+0x24>
		// get ready to try checking again
		intr_state = SREG;
 3cc:	9f b7       	in	r25, 0x3f	; 63
		cli();
 3ce:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 3d0:	30 93 e9 00 	sts	0x00E9, r19
	}
 3d4:	ea cf       	rjmp	.-44     	; 0x3aa <usb_debug_putchar+0x34>
	// actually write the byte into the FIFO
	UEDATX = c;
 3d6:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 3da:	80 91 e8 00 	lds	r24, 0x00E8
 3de:	85 fd       	sbrc	r24, 5
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <usb_debug_putchar+0x78>
		UEINTX = 0x3A;
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 3e8:	10 92 01 01 	sts	0x0101, r1
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <usb_debug_putchar+0x7e>
	} else {
		debug_flush_timer = 2;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 93 01 01 	sts	0x0101, r24
	}
	SREG = intr_state;
 3f4:	9f bf       	out	0x3f, r25	; 63
	return 0;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
}
 3f8:	08 95       	ret

000003fa <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 408:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 40c:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 410:	83 ff       	sbrs	r24, 3
 412:	0f c0       	rjmp	.+30     	; 0x432 <__vector_10+0x38>
		UENUM = 0;
 414:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 41e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 422:	92 e2       	ldi	r25, 0x22	; 34
 424:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 428:	98 e0       	ldi	r25, 0x08	; 8
 42a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 42e:	10 92 02 01 	sts	0x0102, r1
        }
	if (intbits & (1<<SOFI)) {
 432:	82 ff       	sbrs	r24, 2
 434:	1a c0       	rjmp	.+52     	; 0x46a <__vector_10+0x70>
		if (usb_configuration) {
 436:	80 91 02 01 	lds	r24, 0x0102
 43a:	88 23       	and	r24, r24
 43c:	b1 f0       	breq	.+44     	; 0x46a <__vector_10+0x70>
			t = debug_flush_timer;
 43e:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 442:	88 23       	and	r24, r24
 444:	91 f0       	breq	.+36     	; 0x46a <__vector_10+0x70>
				debug_flush_timer = -- t;
 446:	81 50       	subi	r24, 0x01	; 1
 448:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 44c:	81 11       	cpse	r24, r1
 44e:	0d c0       	rjmp	.+26     	; 0x46a <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 456:	80 91 e8 00 	lds	r24, 0x00E8
 45a:	85 ff       	sbrs	r24, 5
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__vector_10+0x6a>
						UEDATX = 0;
 45e:	10 92 f1 00 	sts	0x00F1, r1
 462:	f9 cf       	rjmp	.-14     	; 0x456 <__vector_10+0x5c>
					}
					UEINTX = 0x3A;
 464:	8a e3       	ldi	r24, 0x3A	; 58
 466:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	1f 92       	push	r1
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4ac:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4b0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4b4:	83 ff       	sbrs	r24, 3
 4b6:	00 c1       	rjmp	.+512    	; 0x6b8 <__vector_11+0x240>
                bmRequestType = UEDATX;
 4b8:	90 91 f1 00 	lds	r25, 0x00F1
                bRequest = UEDATX;
 4bc:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
 4c0:	00 91 f1 00 	lds	r16, 0x00F1
                wValue |= (UEDATX << 8);
 4c4:	20 91 f1 00 	lds	r18, 0x00F1
 4c8:	10 e0       	ldi	r17, 0x00	; 0
 4ca:	12 2b       	or	r17, r18
                wIndex = UEDATX;
 4cc:	30 91 f1 00 	lds	r19, 0x00F1
                wIndex |= (UEDATX << 8);
 4d0:	20 91 f1 00 	lds	r18, 0x00F1
 4d4:	e3 2e       	mov	r14, r19
 4d6:	f1 2c       	mov	r15, r1
 4d8:	f2 2a       	or	r15, r18
                wLength = UEDATX;
 4da:	20 91 f1 00 	lds	r18, 0x00F1
                wLength |= (UEDATX << 8);
 4de:	40 91 f1 00 	lds	r20, 0x00F1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	34 2b       	or	r19, r20
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4e6:	42 ef       	ldi	r20, 0xF2	; 242
 4e8:	40 93 e8 00 	sts	0x00E8, r20
                if (bRequest == GET_DESCRIPTOR) {
 4ec:	86 30       	cpi	r24, 0x06	; 6
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__vector_11+0x7a>
 4f0:	44 c0       	rjmp	.+136    	; 0x57a <__vector_11+0x102>
 4f2:	67 e0       	ldi	r22, 0x07	; 7
 4f4:	89 e2       	ldi	r24, 0x29	; 41
 4f6:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 4f8:	fc 01       	movw	r30, r24
 4fa:	45 91       	lpm	r20, Z+
 4fc:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 4fe:	40 17       	cp	r20, r16
 500:	51 07       	cpc	r21, r17
 502:	39 f4       	brne	.+14     	; 0x512 <__vector_11+0x9a>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
 504:	fc 01       	movw	r30, r24
 506:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 508:	45 91       	lpm	r20, Z+
 50a:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 50c:	4e 15       	cp	r20, r14
 50e:	5f 05       	cpc	r21, r15
 510:	21 f0       	breq	.+8      	; 0x51a <__vector_11+0xa2>
					list += sizeof(struct descriptor_list_struct)-2;
 512:	07 96       	adiw	r24, 0x07	; 7
 514:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 516:	81 f7       	brne	.-32     	; 0x4f8 <__vector_11+0x80>
 518:	cf c0       	rjmp	.+414    	; 0x6b8 <__vector_11+0x240>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 51a:	fc 01       	movw	r30, r24
 51c:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 51e:	45 91       	lpm	r20, Z+
 520:	54 91       	lpm	r21, Z
				list += 2;
 522:	fc 01       	movw	r30, r24
 524:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 526:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 528:	2f 3f       	cpi	r18, 0xFF	; 255
 52a:	31 05       	cpc	r19, r1
 52c:	19 f0       	breq	.+6      	; 0x534 <__vector_11+0xbc>
 52e:	10 f0       	brcs	.+4      	; 0x534 <__vector_11+0xbc>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	28 17       	cp	r18, r24
 536:	08 f4       	brcc	.+2      	; 0x53a <__vector_11+0xc2>
 538:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 53a:	3e ef       	ldi	r19, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 53c:	90 91 e8 00 	lds	r25, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 540:	29 2f       	mov	r18, r25
 542:	25 70       	andi	r18, 0x05	; 5
 544:	d9 f3       	breq	.-10     	; 0x53c <__vector_11+0xc4>
				if (i & (1<<RXOUTI)) return;	// abort
 546:	92 fd       	sbrc	r25, 2
 548:	ba c0       	rjmp	.+372    	; 0x6be <__vector_11+0x246>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 54a:	98 2f       	mov	r25, r24
 54c:	81 32       	cpi	r24, 0x21	; 33
 54e:	08 f0       	brcs	.+2      	; 0x552 <__vector_11+0xda>
 550:	90 e2       	ldi	r25, 0x20	; 32
				for (i = n; i; i--) {
 552:	fa 01       	movw	r30, r20
 554:	29 2f       	mov	r18, r25
 556:	22 23       	and	r18, r18
 558:	31 f0       	breq	.+12     	; 0x566 <__vector_11+0xee>
					UEDATX = pgm_read_byte(desc_addr++);
 55a:	64 91       	lpm	r22, Z
 55c:	60 93 f1 00 	sts	0x00F1, r22
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 560:	21 50       	subi	r18, 0x01	; 1
 562:	31 96       	adiw	r30, 0x01	; 1
 564:	f8 cf       	rjmp	.-16     	; 0x556 <__vector_11+0xde>
 566:	49 0f       	add	r20, r25
 568:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 56a:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 56c:	30 93 e8 00 	sts	0x00E8, r19
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 570:	81 11       	cpse	r24, r1
 572:	e4 cf       	rjmp	.-56     	; 0x53c <__vector_11+0xc4>
 574:	90 32       	cpi	r25, 0x20	; 32
 576:	11 f3       	breq	.-60     	; 0x53c <__vector_11+0xc4>
 578:	a2 c0       	rjmp	.+324    	; 0x6be <__vector_11+0x246>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 57a:	85 30       	cpi	r24, 0x05	; 5
 57c:	41 f4       	brne	.+16     	; 0x58e <__vector_11+0x116>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 57e:	8e ef       	ldi	r24, 0xFE	; 254
 580:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 584:	dc de       	rcall	.-584    	; 0x33e <usb_wait_in_ready>
 586:	00 68       	ori	r16, 0x80	; 128
			UDADDR = wValue | (1<<ADDEN);
 588:	00 93 e3 00 	sts	0x00E3, r16
 58c:	98 c0       	rjmp	.+304    	; 0x6be <__vector_11+0x246>
			return;
 58e:	89 30       	cpi	r24, 0x09	; 9
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 590:	41 f5       	brne	.+80     	; 0x5e2 <__vector_11+0x16a>
 592:	91 11       	cpse	r25, r1
 594:	4b c0       	rjmp	.+150    	; 0x62c <__vector_11+0x1b4>
 596:	00 93 02 01 	sts	0x0102, r16
			usb_configuration = wValue;
 59a:	8e ef       	ldi	r24, 0xFE	; 254
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 59c:	80 93 e8 00 	sts	0x00E8, r24
 5a0:	41 e0       	ldi	r20, 0x01	; 1
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5a2:	8f ed       	ldi	r24, 0xDF	; 223
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	40 93 e9 00 	sts	0x00E9, r20
			for (i=1; i<5; i++) {
				UENUM = i;
 5aa:	9c 01       	movw	r18, r24
				en = pgm_read_byte(cfg++);
 5ac:	2f 5f       	subi	r18, 0xFF	; 255
 5ae:	3f 4f       	sbci	r19, 0xFF	; 255
 5b0:	fc 01       	movw	r30, r24
 5b2:	54 91       	lpm	r21, Z
 5b4:	50 93 eb 00 	sts	0x00EB, r21
				UECONX = en;
 5b8:	55 23       	and	r21, r21
				if (en) {
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <__vector_11+0x15c>
 5bc:	f9 01       	movw	r30, r18
					UECFG0X = pgm_read_byte(cfg++);
 5be:	24 91       	lpm	r18, Z
 5c0:	20 93 ec 00 	sts	0x00EC, r18
 5c4:	9c 01       	movw	r18, r24
					UECFG1X = pgm_read_byte(cfg++);
 5c6:	2d 5f       	subi	r18, 0xFD	; 253
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	fc 01       	movw	r30, r24
 5cc:	32 96       	adiw	r30, 0x02	; 2
 5ce:	84 91       	lpm	r24, Z
 5d0:	80 93 ed 00 	sts	0x00ED, r24
 5d4:	4f 5f       	subi	r20, 0xFF	; 255
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5d6:	45 30       	cpi	r20, 0x05	; 5
 5d8:	11 f0       	breq	.+4      	; 0x5de <__vector_11+0x166>
 5da:	c9 01       	movw	r24, r18
 5dc:	e4 cf       	rjmp	.-56     	; 0x5a6 <__vector_11+0x12e>
 5de:	8e e1       	ldi	r24, 0x1E	; 30
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 5e0:	45 c0       	rjmp	.+138    	; 0x66c <__vector_11+0x1f4>
 5e2:	88 30       	cpi	r24, 0x08	; 8
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 5e4:	49 f4       	brne	.+18     	; 0x5f8 <__vector_11+0x180>
 5e6:	90 38       	cpi	r25, 0x80	; 128
 5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_11+0x174>
 5ea:	66 c0       	rjmp	.+204    	; 0x6b8 <__vector_11+0x240>
 5ec:	a8 de       	rcall	.-688    	; 0x33e <usb_wait_in_ready>
			usb_wait_in_ready();
 5ee:	80 91 02 01 	lds	r24, 0x0102
			UEDATX = usb_configuration;
 5f2:	80 93 f1 00 	sts	0x00F1, r24
 5f6:	16 c0       	rjmp	.+44     	; 0x624 <__vector_11+0x1ac>
 5f8:	81 11       	cpse	r24, r1
 5fa:	18 c0       	rjmp	.+48     	; 0x62c <__vector_11+0x1b4>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 5fc:	99 83       	std	Y+1, r25	; 0x01
 5fe:	9f de       	rcall	.-706    	; 0x33e <usb_wait_in_ready>
			usb_wait_in_ready();
 600:	99 81       	ldd	r25, Y+1	; 0x01
 602:	92 38       	cpi	r25, 0x82	; 130
 604:	51 f4       	brne	.+20     	; 0x61a <__vector_11+0x1a2>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 606:	e0 92 e9 00 	sts	0x00E9, r14
 60a:	80 91 eb 00 	lds	r24, 0x00EB
				UENUM = wIndex;
 60e:	85 fb       	bst	r24, 5
				if (UECONX & (1<<STALLRQ)) i = 1;
 610:	88 27       	eor	r24, r24
 612:	80 f9       	bld	r24, 0
 614:	10 92 e9 00 	sts	0x00E9, r1
 618:	01 c0       	rjmp	.+2      	; 0x61c <__vector_11+0x1a4>
				UENUM = 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 620:	10 92 f1 00 	sts	0x00F1, r1
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 624:	8e ef       	ldi	r24, 0xFE	; 254
			UEDATX = 0;
 626:	80 93 e8 00 	sts	0x00E8, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 62a:	49 c0       	rjmp	.+146    	; 0x6be <__vector_11+0x246>
 62c:	48 2f       	mov	r20, r24
 62e:	4d 7f       	andi	r20, 0xFD	; 253
 630:	41 30       	cpi	r20, 0x01	; 1
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 632:	09 f0       	breq	.+2      	; 0x636 <__vector_11+0x1be>
 634:	41 c0       	rjmp	.+130    	; 0x6b8 <__vector_11+0x240>
 636:	92 30       	cpi	r25, 0x02	; 2
 638:	f1 f4       	brne	.+60     	; 0x676 <__vector_11+0x1fe>
 63a:	01 2b       	or	r16, r17
		  && bmRequestType == 0x02 && wValue == 0) {
 63c:	e9 f5       	brne	.+122    	; 0x6b8 <__vector_11+0x240>
 63e:	2e 2d       	mov	r18, r14
 640:	2f 77       	andi	r18, 0x7F	; 127
 642:	9f ef       	ldi	r25, 0xFF	; 255
			i = wIndex & 0x7F;
 644:	92 0f       	add	r25, r18
 646:	94 30       	cpi	r25, 0x04	; 4
			if (i >= 1 && i <= MAX_ENDPOINT) {
 648:	b8 f5       	brcc	.+110    	; 0x6b8 <__vector_11+0x240>
 64a:	9e ef       	ldi	r25, 0xFE	; 254
 64c:	90 93 e8 00 	sts	0x00E8, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 650:	20 93 e9 00 	sts	0x00E9, r18
 654:	83 30       	cpi	r24, 0x03	; 3
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 656:	81 f1       	breq	.+96     	; 0x6b8 <__vector_11+0x240>
 658:	89 e1       	ldi	r24, 0x19	; 25
				if (bRequest == SET_FEATURE) {
 65a:	80 93 eb 00 	sts	0x00EB, r24
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 2e       	mov	r0, r18
					UERST = (1 << i);
 664:	01 c0       	rjmp	.+2      	; 0x668 <__vector_11+0x1f0>
 666:	88 0f       	add	r24, r24
 668:	0a 94       	dec	r0
 66a:	ea f7       	brpl	.-6      	; 0x666 <__vector_11+0x1ee>
 66c:	80 93 ea 00 	sts	0x00EA, r24
 670:	10 92 ea 00 	sts	0x00EA, r1
 674:	24 c0       	rjmp	.+72     	; 0x6be <__vector_11+0x246>
					UERST = 0;
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	f9 f4       	brne	.+62     	; 0x6b8 <__vector_11+0x240>
 67a:	91 3a       	cpi	r25, 0xA1	; 161
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 67c:	e9 f4       	brne	.+58     	; 0x6b8 <__vector_11+0x240>
 67e:	ef 28       	or	r14, r15
 680:	d9 f4       	brne	.+54     	; 0x6b8 <__vector_11+0x240>
 682:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
 684:	80 91 e8 00 	lds	r24, 0x00E8
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 688:	98 2f       	mov	r25, r24
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 68a:	95 70       	andi	r25, 0x05	; 5
 68c:	d9 f3       	breq	.-10     	; 0x684 <__vector_11+0x20c>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 68e:	82 fd       	sbrc	r24, 2
 690:	16 c0       	rjmp	.+44     	; 0x6be <__vector_11+0x246>
 692:	82 2f       	mov	r24, r18
					if (i & (1<<RXOUTI)) return;	// abort
 694:	21 32       	cpi	r18, 0x21	; 33
 696:	08 f0       	brcs	.+2      	; 0x69a <__vector_11+0x222>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 698:	80 e2       	ldi	r24, 0x20	; 32
 69a:	98 2f       	mov	r25, r24
 69c:	99 23       	and	r25, r25
 69e:	21 f0       	breq	.+8      	; 0x6a8 <__vector_11+0x230>
					for (i = n; i; i--) {
 6a0:	10 92 f1 00 	sts	0x00F1, r1
 6a4:	91 50       	subi	r25, 0x01	; 1
						UEDATX = 0;
 6a6:	fa cf       	rjmp	.-12     	; 0x69c <__vector_11+0x224>
 6a8:	28 1b       	sub	r18, r24
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 6aa:	30 93 e8 00 	sts	0x00E8, r19
						UEDATX = 0;
					}
					len -= n;
 6ae:	21 11       	cpse	r18, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6b0:	e9 cf       	rjmp	.-46     	; 0x684 <__vector_11+0x20c>
 6b2:	80 32       	cpi	r24, 0x20	; 32
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 6b4:	39 f3       	breq	.-50     	; 0x684 <__vector_11+0x20c>
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <__vector_11+0x246>
 6b8:	81 e2       	ldi	r24, 0x21	; 33
 6ba:	80 93 eb 00 	sts	0x00EB, r24
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 6be:	0f 90       	pop	r0
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	ec 01       	movw	r28, r24
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 6f6:	fe 01       	movw	r30, r28
 6f8:	14 91       	lpm	r17, Z
		if (!c) break;
 6fa:	11 23       	and	r17, r17
 6fc:	41 f0       	breq	.+16     	; 0x70e <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 6fe:	1a 30       	cpi	r17, 0x0A	; 10
 700:	11 f4       	brne	.+4      	; 0x706 <print_P+0x18>
 702:	8d e0       	ldi	r24, 0x0D	; 13
 704:	38 de       	rcall	.-912    	; 0x376 <usb_debug_putchar>
 706:	81 2f       	mov	r24, r17
		usb_debug_putchar(c);
 708:	36 de       	rcall	.-916    	; 0x376 <usb_debug_putchar>
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	f4 cf       	rjmp	.-24     	; 0x6f6 <print_P+0x8>
 70e:	df 91       	pop	r29
	}
 710:	cf 91       	pop	r28
}
 712:	1f 91       	pop	r17
 714:	08 95       	ret

00000716 <_exit>:
 716:	f8 94       	cli

00000718 <__stop_program>:
 718:	ff cf       	rjmp	.-2      	; 0x718 <__stop_program>
